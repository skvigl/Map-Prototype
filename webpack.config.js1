var argv = require( 'yargs' ).argv;

var isDev = !argv.live;
var isDevServer = process.argv[1].indexOf( 'webpack-dev-server' ) >= 0;

console.log( isDev ? '\n*** running development ***\n' : '\n*** running production ***\n' );

var webpack = require( 'webpack' ),
    path = require( 'path' ),
    ExtractTextPlugin = require( 'extract-text-webpack-plugin' ),
    //SvgStore = require('webpack-svgstore-plugin'),
    Clean = require( 'clean-webpack-plugin' ),

    //postcss plugins
    postcssFlexbugsFixes = require( 'postcss-flexbugs-fixes' ),
    autoprefixer = require( 'autoprefixer' ),
    cssnano = require( 'cssnano' ),
    mqpacker = require( "css-mqpacker" );

module.exports = {
    entry: (function () {
        var entry = {
            'app': ["babel-polyfill", "./app/app"]//,
            //'spritesJs': ["spritesJs"]
        };

        if ( isDevServer ) {
            for ( var entryName in entry )
                entry[entryName].unshift( 'webpack-dev-server/client?http://localhost:8080', 'webpack/hot/dev-server' );
        }

        return entry;
    })(),

    output: {
        path: path.resolve( __dirname + "/dist/" ),
        publicPath: '/assets/dist/',
        filename: '[name].js'//,
        //chunkFilename: isDev ? "[name].result.js" : "[name].[hash].js"
    },

    resolve: {
        modulesDirectories: [
            "app/components",
            "node_modules"
        ],
        alias: {
            handlebars: 'handlebars/dist/handlebars.min.js'
//		 	'jquery': 'jquery-3.0.0',
//		 	'jqueryviewport': 'jquery.viewport'
        },
        extensions: ["", ".min.js", ".custom.js", ".jquery.js", ".js"]
    },

    devtool: 'source-map',

    module: {
        loaders: [
            {
                test: /\.js$/,
                exclude: /node_modules/,
                loader: 'babel',
                query: {
                    presets: ['env'],
                    plugins: [
                        'transform-object-assign'
                    ]
                }
            },
            // {
            //     test: /\.css/,
            //     loader: isDevServer ? 'style!css!postcss' : ExtractTextPlugin.extract( 'style', 'css!postcss' )
            // },
            {
                test: /\.scss$/,
                loader: isDevServer ? 'style!css!sass!postcss' : ExtractTextPlugin.extract( 'style', 'css!sass-loader!postcss' )
            },
            {
                test: /\.(svg|png|jpg|jpeg|eot|ttf|woff|woff2|gif)$/i,
                loaders: [
                    'url-loader?limit=10000'
                ]
            },
            {
                test: /\.(hbs|handlebars)/,
                loader: "handlebars-loader"
            },
            {
                test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                loader: "url-loader?limit=10000&minetype=application/font-woff"
            },
            {
                test: /\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                loader: "file-loader"
            }
        ]
    },

    postcss: function () {
        var postPlugins = [
            postcssFlexbugsFixes,
            autoprefixer( {browsers: ["last 2 versions", "ie 9"]} )
        ];

        if ( !isDev ) {
            postPlugins.push(
                mqpacker(),
                cssnano( {
                    safe: true,
                    zindex: false,
                    autoprefixer: {
                        remove: false,
                        browsers: ["last 3 versions", "ie 9"]
                    },
                    discardComments: {
                        removeAll: true
                    },
                    convertValues: {
                        length: false
                    }
                } )
            );
        }

        return postPlugins;
    },

    plugins: (function () {
        var plugins = isDevServer ? [new webpack.HotModuleReplacementPlugin()] : [new Clean( [path.join( __dirname, 'dist' )] )];

        // plugins.push(
        //     new SvgStore(
        //         path.resolve("assets/svg/icons/**/*.svg"),"",
        //         {
        //             name: isDev ? 'sprite.svg' : "[hash].sprite.svg",
        //             prefix: 'icon-',
        //             chunk: 'head',
        //             svgoOptions: {
        //                 plugins: [
        //                     {
        //                         'removeAttrs': {
        //                             attrs: 'path:fill'
        //                         }
        //                     }
        //                 ]
        //             }
        //         }),
        //     new webpack.NoErrorsPlugin()
        // );

        if ( !isDevServer ) {
            plugins.push(
                new ExtractTextPlugin( '[name].css', {allChunks: true, disable: process.env.NODE_ENV == "development"} )
            );
        }

        // if (!isDev) {
        //     plugins.push(
        //         new webpack.optimize.UglifyJsPlugin({
        //             output: {
        //                 comments: false
        //             },
        //             compress: {
        //                 warnings: false
        //             }
        //         }),
        //         new webpack.optimize.OccurenceOrderPlugin()
        //     );
        // }

        return plugins;
    })(),

    stats: {
        children: false
    },

    devServer: {
        headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Credentials": 'true'
        },
        hot: true,
        // stats: {
        //   children: false
        // }
    }
};
